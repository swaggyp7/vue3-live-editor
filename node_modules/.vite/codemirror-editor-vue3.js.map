{
  "version": 3,
  "sources": ["../codemirror/addon/merge/merge.js", "../diff-match-patch/index.js", "../codemirror-editor-vue3/dist/codemirror-editor-vue3.es.js", "dep:codemirror-editor-vue3"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// declare global: diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\")); // Note non-packaged dependency diff_match_patch\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"diff_match_patch\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n  var svgNS = \"http://www.w3.org/2000/svg\";\n\n  function DiffView(mv, type) {\n    this.mv = mv;\n    this.type = type;\n    this.classes = type == \"left\"\n      ? {chunk: \"CodeMirror-merge-l-chunk\",\n         start: \"CodeMirror-merge-l-chunk-start\",\n         end: \"CodeMirror-merge-l-chunk-end\",\n         insert: \"CodeMirror-merge-l-inserted\",\n         del: \"CodeMirror-merge-l-deleted\",\n         connect: \"CodeMirror-merge-l-connect\"}\n      : {chunk: \"CodeMirror-merge-r-chunk\",\n         start: \"CodeMirror-merge-r-chunk-start\",\n         end: \"CodeMirror-merge-r-chunk-end\",\n         insert: \"CodeMirror-merge-r-inserted\",\n         del: \"CodeMirror-merge-r-deleted\",\n         connect: \"CodeMirror-merge-r-connect\"};\n  }\n\n  DiffView.prototype = {\n    constructor: DiffView,\n    init: function(pane, orig, options) {\n      this.edit = this.mv.edit;\n      ;(this.edit.state.diffViews || (this.edit.state.diffViews = [])).push(this);\n      this.orig = CodeMirror(pane, copyObj({value: orig, readOnly: !this.mv.options.allowEditingOriginals}, copyObj(options)));\n      if (this.mv.options.connect == \"align\") {\n        if (!this.edit.state.trackAlignable) this.edit.state.trackAlignable = new TrackAlignable(this.edit)\n        this.orig.state.trackAlignable = new TrackAlignable(this.orig)\n      }\n      this.lockButton.title = this.edit.phrase(\"Toggle locked scrolling\");\n\n      this.orig.state.diffViews = [this];\n      var classLocation = options.chunkClassLocation || \"background\";\n      if (Object.prototype.toString.call(classLocation) != \"[object Array]\") classLocation = [classLocation]\n      this.classes.classLocation = classLocation\n\n      this.diff = getDiff(asString(orig), asString(options.value), this.mv.options.ignoreWhitespace);\n      this.chunks = getChunks(this.diff);\n      this.diffOutOfDate = this.dealigned = false;\n      this.needsScrollSync = null\n\n      this.showDifferences = options.showDifferences !== false;\n    },\n    registerEvents: function(otherDv) {\n      this.forceUpdate = registerUpdate(this);\n      setScrollLock(this, true, false);\n      registerScroll(this, otherDv);\n    },\n    setShowDifferences: function(val) {\n      val = val !== false;\n      if (val != this.showDifferences) {\n        this.showDifferences = val;\n        this.forceUpdate(\"full\");\n      }\n    }\n  };\n\n  function ensureDiff(dv) {\n    if (dv.diffOutOfDate) {\n      dv.diff = getDiff(dv.orig.getValue(), dv.edit.getValue(), dv.mv.options.ignoreWhitespace);\n      dv.chunks = getChunks(dv.diff);\n      dv.diffOutOfDate = false;\n      CodeMirror.signal(dv.edit, \"updateDiff\", dv.diff);\n    }\n  }\n\n  var updating = false;\n  function registerUpdate(dv) {\n    var edit = {from: 0, to: 0, marked: []};\n    var orig = {from: 0, to: 0, marked: []};\n    var debounceChange, updatingFast = false;\n    function update(mode) {\n      updating = true;\n      updatingFast = false;\n      if (mode == \"full\") {\n        if (dv.svg) clear(dv.svg);\n        if (dv.copyButtons) clear(dv.copyButtons);\n        clearMarks(dv.edit, edit.marked, dv.classes);\n        clearMarks(dv.orig, orig.marked, dv.classes);\n        edit.from = edit.to = orig.from = orig.to = 0;\n      }\n      ensureDiff(dv);\n      if (dv.showDifferences) {\n        updateMarks(dv.edit, dv.diff, edit, DIFF_INSERT, dv.classes);\n        updateMarks(dv.orig, dv.diff, orig, DIFF_DELETE, dv.classes);\n      }\n\n      if (dv.mv.options.connect == \"align\")\n        alignChunks(dv);\n      makeConnections(dv);\n      if (dv.needsScrollSync != null) syncScroll(dv, dv.needsScrollSync)\n\n      updating = false;\n    }\n    function setDealign(fast) {\n      if (updating) return;\n      dv.dealigned = true;\n      set(fast);\n    }\n    function set(fast) {\n      if (updating || updatingFast) return;\n      clearTimeout(debounceChange);\n      if (fast === true) updatingFast = true;\n      debounceChange = setTimeout(update, fast === true ? 20 : 250);\n    }\n    function change(_cm, change) {\n      if (!dv.diffOutOfDate) {\n        dv.diffOutOfDate = true;\n        edit.from = edit.to = orig.from = orig.to = 0;\n      }\n      // Update faster when a line was added/removed\n      setDealign(change.text.length - 1 != change.to.line - change.from.line);\n    }\n    function swapDoc() {\n      dv.diffOutOfDate = true;\n      dv.dealigned = true;\n      update(\"full\");\n    }\n    dv.edit.on(\"change\", change);\n    dv.orig.on(\"change\", change);\n    dv.edit.on(\"swapDoc\", swapDoc);\n    dv.orig.on(\"swapDoc\", swapDoc);\n    if (dv.mv.options.connect == \"align\") {\n      CodeMirror.on(dv.edit.state.trackAlignable, \"realign\", setDealign)\n      CodeMirror.on(dv.orig.state.trackAlignable, \"realign\", setDealign)\n    }\n    dv.edit.on(\"viewportChange\", function() { set(false); });\n    dv.orig.on(\"viewportChange\", function() { set(false); });\n    update();\n    return update;\n  }\n\n  function registerScroll(dv, otherDv) {\n    dv.edit.on(\"scroll\", function() {\n      syncScroll(dv, true) && makeConnections(dv);\n    });\n    dv.orig.on(\"scroll\", function() {\n      syncScroll(dv, false) && makeConnections(dv);\n      if (otherDv) syncScroll(otherDv, true) && makeConnections(otherDv);\n    });\n  }\n\n  function syncScroll(dv, toOrig) {\n    // Change handler will do a refresh after a timeout when diff is out of date\n    if (dv.diffOutOfDate) {\n      if (dv.lockScroll && dv.needsScrollSync == null) dv.needsScrollSync = toOrig\n      return false\n    }\n    dv.needsScrollSync = null\n    if (!dv.lockScroll) return true;\n    var editor, other, now = +new Date;\n    if (toOrig) { editor = dv.edit; other = dv.orig; }\n    else { editor = dv.orig; other = dv.edit; }\n    // Don't take action if the position of this editor was recently set\n    // (to prevent feedback loops)\n    if (editor.state.scrollSetBy == dv && (editor.state.scrollSetAt || 0) + 250 > now) return false;\n\n    var sInfo = editor.getScrollInfo();\n    if (dv.mv.options.connect == \"align\") {\n      targetPos = sInfo.top;\n    } else {\n      var halfScreen = .5 * sInfo.clientHeight, midY = sInfo.top + halfScreen;\n      var mid = editor.lineAtHeight(midY, \"local\");\n      var around = chunkBoundariesAround(dv.chunks, mid, toOrig);\n      var off = getOffsets(editor, toOrig ? around.edit : around.orig);\n      var offOther = getOffsets(other, toOrig ? around.orig : around.edit);\n      var ratio = (midY - off.top) / (off.bot - off.top);\n      var targetPos = (offOther.top - halfScreen) + ratio * (offOther.bot - offOther.top);\n\n      var botDist, mix;\n      // Some careful tweaking to make sure no space is left out of view\n      // when scrolling to top or bottom.\n      if (targetPos > sInfo.top && (mix = sInfo.top / halfScreen) < 1) {\n        targetPos = targetPos * mix + sInfo.top * (1 - mix);\n      } else if ((botDist = sInfo.height - sInfo.clientHeight - sInfo.top) < halfScreen) {\n        var otherInfo = other.getScrollInfo();\n        var botDistOther = otherInfo.height - otherInfo.clientHeight - targetPos;\n        if (botDistOther > botDist && (mix = botDist / halfScreen) < 1)\n          targetPos = targetPos * mix + (otherInfo.height - otherInfo.clientHeight - botDist) * (1 - mix);\n      }\n    }\n\n    other.scrollTo(sInfo.left, targetPos);\n    other.state.scrollSetAt = now;\n    other.state.scrollSetBy = dv;\n    return true;\n  }\n\n  function getOffsets(editor, around) {\n    var bot = around.after;\n    if (bot == null) bot = editor.lastLine() + 1;\n    return {top: editor.heightAtLine(around.before || 0, \"local\"),\n            bot: editor.heightAtLine(bot, \"local\")};\n  }\n\n  function setScrollLock(dv, val, action) {\n    dv.lockScroll = val;\n    if (val && action != false) syncScroll(dv, DIFF_INSERT) && makeConnections(dv);\n    (val ? CodeMirror.addClass : CodeMirror.rmClass)(dv.lockButton, \"CodeMirror-merge-scrolllock-enabled\");\n  }\n\n  // Updating the marks for editor content\n\n  function removeClass(editor, line, classes) {\n    var locs = classes.classLocation\n    for (var i = 0; i < locs.length; i++) {\n      editor.removeLineClass(line, locs[i], classes.chunk);\n      editor.removeLineClass(line, locs[i], classes.start);\n      editor.removeLineClass(line, locs[i], classes.end);\n    }\n  }\n\n  function clearMarks(editor, arr, classes) {\n    for (var i = 0; i < arr.length; ++i) {\n      var mark = arr[i];\n      if (mark instanceof CodeMirror.TextMarker)\n        mark.clear();\n      else if (mark.parent)\n        removeClass(editor, mark, classes);\n    }\n    arr.length = 0;\n  }\n\n  // FIXME maybe add a margin around viewport to prevent too many updates\n  function updateMarks(editor, diff, state, type, classes) {\n    var vp = editor.getViewport();\n    editor.operation(function() {\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        clearMarks(editor, state.marked, classes);\n        markChanges(editor, diff, type, state.marked, vp.from, vp.to, classes);\n        state.from = vp.from; state.to = vp.to;\n      } else {\n        if (vp.from < state.from) {\n          markChanges(editor, diff, type, state.marked, vp.from, state.from, classes);\n          state.from = vp.from;\n        }\n        if (vp.to > state.to) {\n          markChanges(editor, diff, type, state.marked, state.to, vp.to, classes);\n          state.to = vp.to;\n        }\n      }\n    });\n  }\n\n  function addClass(editor, lineNr, classes, main, start, end) {\n    var locs = classes.classLocation, line = editor.getLineHandle(lineNr);\n    for (var i = 0; i < locs.length; i++) {\n      if (main) editor.addLineClass(line, locs[i], classes.chunk);\n      if (start) editor.addLineClass(line, locs[i], classes.start);\n      if (end) editor.addLineClass(line, locs[i], classes.end);\n    }\n    return line;\n  }\n\n  function markChanges(editor, diff, type, marks, from, to, classes) {\n    var pos = Pos(0, 0);\n    var top = Pos(from, 0), bot = editor.clipPos(Pos(to - 1));\n    var cls = type == DIFF_DELETE ? classes.del : classes.insert;\n    function markChunk(start, end) {\n      var bfrom = Math.max(from, start), bto = Math.min(to, end);\n      for (var i = bfrom; i < bto; ++i)\n        marks.push(addClass(editor, i, classes, true, i == start, i == end - 1));\n      // When the chunk is empty, make sure a horizontal line shows up\n      if (start == end && bfrom == end && bto == end) {\n        if (bfrom)\n          marks.push(addClass(editor, bfrom - 1, classes, false, false, true));\n        else\n          marks.push(addClass(editor, bfrom, classes, false, true, false));\n      }\n    }\n\n    var chunkStart = 0, pending = false;\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i], tp = part[0], str = part[1];\n      if (tp == DIFF_EQUAL) {\n        var cleanFrom = pos.line + (startOfLineClean(diff, i) ? 0 : 1);\n        moveOver(pos, str);\n        var cleanTo = pos.line + (endOfLineClean(diff, i) ? 1 : 0);\n        if (cleanTo > cleanFrom) {\n          if (pending) { markChunk(chunkStart, cleanFrom); pending = false }\n          chunkStart = cleanTo;\n        }\n      } else {\n        pending = true\n        if (tp == type) {\n          var end = moveOver(pos, str, true);\n          var a = posMax(top, pos), b = posMin(bot, end);\n          if (!posEq(a, b))\n            marks.push(editor.markText(a, b, {className: cls}));\n          pos = end;\n        }\n      }\n    }\n    if (pending) markChunk(chunkStart, pos.line + 1);\n  }\n\n  // Updating the gap between editor and original\n\n  function makeConnections(dv) {\n    if (!dv.showDifferences) return;\n\n    if (dv.svg) {\n      clear(dv.svg);\n      var w = dv.gap.offsetWidth;\n      attrs(dv.svg, \"width\", w, \"height\", dv.gap.offsetHeight);\n    }\n    if (dv.copyButtons) clear(dv.copyButtons);\n\n    var vpEdit = dv.edit.getViewport(), vpOrig = dv.orig.getViewport();\n    var outerTop = dv.mv.wrap.getBoundingClientRect().top\n    var sTopEdit = outerTop - dv.edit.getScrollerElement().getBoundingClientRect().top + dv.edit.getScrollInfo().top\n    var sTopOrig = outerTop - dv.orig.getScrollerElement().getBoundingClientRect().top + dv.orig.getScrollInfo().top;\n    for (var i = 0; i < dv.chunks.length; i++) {\n      var ch = dv.chunks[i];\n      if (ch.editFrom <= vpEdit.to && ch.editTo >= vpEdit.from &&\n          ch.origFrom <= vpOrig.to && ch.origTo >= vpOrig.from)\n        drawConnectorsForChunk(dv, ch, sTopOrig, sTopEdit, w);\n    }\n  }\n\n  function getMatchingOrigLine(editLine, chunks) {\n    var editStart = 0, origStart = 0;\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      if (chunk.editTo > editLine && chunk.editFrom <= editLine) return null;\n      if (chunk.editFrom > editLine) break;\n      editStart = chunk.editTo;\n      origStart = chunk.origTo;\n    }\n    return origStart + (editLine - editStart);\n  }\n\n  // Combines information about chunks and widgets/markers to return\n  // an array of lines, in a single editor, that probably need to be\n  // aligned with their counterparts in the editor next to it.\n  function alignableFor(cm, chunks, isOrig) {\n    var tracker = cm.state.trackAlignable\n    var start = cm.firstLine(), trackI = 0\n    var result = []\n    for (var i = 0;; i++) {\n      var chunk = chunks[i]\n      var chunkStart = !chunk ? 1e9 : isOrig ? chunk.origFrom : chunk.editFrom\n      for (; trackI < tracker.alignable.length; trackI += 2) {\n        var n = tracker.alignable[trackI] + 1\n        if (n <= start) continue\n        if (n <= chunkStart) result.push(n)\n        else break\n      }\n      if (!chunk) break\n      result.push(start = isOrig ? chunk.origTo : chunk.editTo)\n    }\n    return result\n  }\n\n  // Given information about alignable lines in two editors, fill in\n  // the result (an array of three-element arrays) to reflect the\n  // lines that need to be aligned with each other.\n  function mergeAlignable(result, origAlignable, chunks, setIndex) {\n    var rI = 0, origI = 0, chunkI = 0, diff = 0\n    outer: for (;; rI++) {\n      var nextR = result[rI], nextO = origAlignable[origI]\n      if (!nextR && nextO == null) break\n\n      var rLine = nextR ? nextR[0] : 1e9, oLine = nextO == null ? 1e9 : nextO\n      while (chunkI < chunks.length) {\n        var chunk = chunks[chunkI]\n        if (chunk.origFrom <= oLine && chunk.origTo > oLine) {\n          origI++\n          rI--\n          continue outer;\n        }\n        if (chunk.editTo > rLine) {\n          if (chunk.editFrom <= rLine) continue outer;\n          break\n        }\n        diff += (chunk.origTo - chunk.origFrom) - (chunk.editTo - chunk.editFrom)\n        chunkI++\n      }\n      if (rLine == oLine - diff) {\n        nextR[setIndex] = oLine\n        origI++\n      } else if (rLine < oLine - diff) {\n        nextR[setIndex] = rLine + diff\n      } else {\n        var record = [oLine - diff, null, null]\n        record[setIndex] = oLine\n        result.splice(rI, 0, record)\n        origI++\n      }\n    }\n  }\n\n  function findAlignedLines(dv, other) {\n    var alignable = alignableFor(dv.edit, dv.chunks, false), result = []\n    if (other) for (var i = 0, j = 0; i < other.chunks.length; i++) {\n      var n = other.chunks[i].editTo\n      while (j < alignable.length && alignable[j] < n) j++\n      if (j == alignable.length || alignable[j] != n) alignable.splice(j++, 0, n)\n    }\n    for (var i = 0; i < alignable.length; i++)\n      result.push([alignable[i], null, null])\n\n    mergeAlignable(result, alignableFor(dv.orig, dv.chunks, true), dv.chunks, 1)\n    if (other)\n      mergeAlignable(result, alignableFor(other.orig, other.chunks, true), other.chunks, 2)\n\n    return result\n  }\n\n  function alignChunks(dv, force) {\n    if (!dv.dealigned && !force) return;\n    if (!dv.orig.curOp) return dv.orig.operation(function() {\n      alignChunks(dv, force);\n    });\n\n    dv.dealigned = false;\n    var other = dv.mv.left == dv ? dv.mv.right : dv.mv.left;\n    if (other) {\n      ensureDiff(other);\n      other.dealigned = false;\n    }\n    var linesToAlign = findAlignedLines(dv, other);\n\n    // Clear old aligners\n    var aligners = dv.mv.aligners;\n    for (var i = 0; i < aligners.length; i++)\n      aligners[i].clear();\n    aligners.length = 0;\n\n    var cm = [dv.edit, dv.orig], scroll = [], offset = []\n    if (other) cm.push(other.orig);\n    for (var i = 0; i < cm.length; i++) {\n      scroll.push(cm[i].getScrollInfo().top);\n      offset.push(-cm[i].getScrollerElement().getBoundingClientRect().top)\n    }\n\n    if (offset[0] != offset[1] || cm.length == 3 && offset[1] != offset[2])\n      alignLines(cm, offset, [0, 0, 0], aligners)\n    for (var ln = 0; ln < linesToAlign.length; ln++)\n      alignLines(cm, offset, linesToAlign[ln], aligners);\n\n    for (var i = 0; i < cm.length; i++)\n      cm[i].scrollTo(null, scroll[i]);\n  }\n\n  function alignLines(cm, cmOffset, lines, aligners) {\n    var maxOffset = -1e8, offset = [];\n    for (var i = 0; i < cm.length; i++) if (lines[i] != null) {\n      var off = cm[i].heightAtLine(lines[i], \"local\") - cmOffset[i];\n      offset[i] = off;\n      maxOffset = Math.max(maxOffset, off);\n    }\n    for (var i = 0; i < cm.length; i++) if (lines[i] != null) {\n      var diff = maxOffset - offset[i];\n      if (diff > 1)\n        aligners.push(padAbove(cm[i], lines[i], diff));\n    }\n  }\n\n  function padAbove(cm, line, size) {\n    var above = true;\n    if (line > cm.lastLine()) {\n      line--;\n      above = false;\n    }\n    var elt = document.createElement(\"div\");\n    elt.className = \"CodeMirror-merge-spacer\";\n    elt.style.height = size + \"px\"; elt.style.minWidth = \"1px\";\n    return cm.addLineWidget(line, elt, {height: size, above: above, mergeSpacer: true, handleMouseEvents: true});\n  }\n\n  function drawConnectorsForChunk(dv, chunk, sTopOrig, sTopEdit, w) {\n    var flip = dv.type == \"left\";\n    var top = dv.orig.heightAtLine(chunk.origFrom, \"local\", true) - sTopOrig;\n    if (dv.svg) {\n      var topLpx = top;\n      var topRpx = dv.edit.heightAtLine(chunk.editFrom, \"local\", true) - sTopEdit;\n      if (flip) { var tmp = topLpx; topLpx = topRpx; topRpx = tmp; }\n      var botLpx = dv.orig.heightAtLine(chunk.origTo, \"local\", true) - sTopOrig;\n      var botRpx = dv.edit.heightAtLine(chunk.editTo, \"local\", true) - sTopEdit;\n      if (flip) { var tmp = botLpx; botLpx = botRpx; botRpx = tmp; }\n      var curveTop = \" C \" + w/2 + \" \" + topRpx + \" \" + w/2 + \" \" + topLpx + \" \" + (w + 2) + \" \" + topLpx;\n      var curveBot = \" C \" + w/2 + \" \" + botLpx + \" \" + w/2 + \" \" + botRpx + \" -1 \" + botRpx;\n      attrs(dv.svg.appendChild(document.createElementNS(svgNS, \"path\")),\n            \"d\", \"M -1 \" + topRpx + curveTop + \" L \" + (w + 2) + \" \" + botLpx + curveBot + \" z\",\n            \"class\", dv.classes.connect);\n    }\n    if (dv.copyButtons) {\n      var copy = dv.copyButtons.appendChild(elt(\"div\", dv.type == \"left\" ? \"\\u21dd\" : \"\\u21dc\",\n                                                \"CodeMirror-merge-copy\"));\n      var editOriginals = dv.mv.options.allowEditingOriginals;\n      copy.title = dv.edit.phrase(editOriginals ? \"Push to left\" : \"Revert chunk\");\n      copy.chunk = chunk;\n      copy.style.top = (chunk.origTo > chunk.origFrom ? top : dv.edit.heightAtLine(chunk.editFrom, \"local\") - sTopEdit) + \"px\";\n      copy.setAttribute(\"role\", \"button\");\n\n      if (editOriginals) {\n        var topReverse = dv.edit.heightAtLine(chunk.editFrom, \"local\") - sTopEdit;\n        var copyReverse = dv.copyButtons.appendChild(elt(\"div\", dv.type == \"right\" ? \"\\u21dd\" : \"\\u21dc\",\n                                                         \"CodeMirror-merge-copy-reverse\"));\n        copyReverse.title = \"Push to right\";\n        copyReverse.chunk = {editFrom: chunk.origFrom, editTo: chunk.origTo,\n                             origFrom: chunk.editFrom, origTo: chunk.editTo};\n        copyReverse.style.top = topReverse + \"px\";\n        dv.type == \"right\" ? copyReverse.style.left = \"2px\" : copyReverse.style.right = \"2px\";\n        copyReverse.setAttribute(\"role\", \"button\");\n      }\n    }\n  }\n\n  function copyChunk(dv, to, from, chunk) {\n    if (dv.diffOutOfDate) return;\n    var origStart = chunk.origTo > from.lastLine() ? Pos(chunk.origFrom - 1) : Pos(chunk.origFrom, 0)\n    var origEnd = Pos(chunk.origTo, 0)\n    var editStart = chunk.editTo > to.lastLine() ? Pos(chunk.editFrom - 1) : Pos(chunk.editFrom, 0)\n    var editEnd = Pos(chunk.editTo, 0)\n    var handler = dv.mv.options.revertChunk\n    if (handler)\n      handler(dv.mv, from, origStart, origEnd, to, editStart, editEnd)\n    else\n      to.replaceRange(from.getRange(origStart, origEnd), editStart, editEnd)\n  }\n\n  // Merge view, containing 0, 1, or 2 diff views.\n\n  var MergeView = CodeMirror.MergeView = function(node, options) {\n    if (!(this instanceof MergeView)) return new MergeView(node, options);\n\n    this.options = options;\n    var origLeft = options.origLeft, origRight = options.origRight == null ? options.orig : options.origRight;\n\n    var hasLeft = origLeft != null, hasRight = origRight != null;\n    var panes = 1 + (hasLeft ? 1 : 0) + (hasRight ? 1 : 0);\n    var wrap = [], left = this.left = null, right = this.right = null;\n    var self = this;\n\n    if (hasLeft) {\n      left = this.left = new DiffView(this, \"left\");\n      var leftPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-left\");\n      wrap.push(leftPane);\n      wrap.push(buildGap(left));\n    }\n\n    var editPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-editor\");\n    wrap.push(editPane);\n\n    if (hasRight) {\n      right = this.right = new DiffView(this, \"right\");\n      wrap.push(buildGap(right));\n      var rightPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-right\");\n      wrap.push(rightPane);\n    }\n\n    (hasRight ? rightPane : editPane).className += \" CodeMirror-merge-pane-rightmost\";\n\n    wrap.push(elt(\"div\", null, null, \"height: 0; clear: both;\"));\n\n    var wrapElt = this.wrap = node.appendChild(elt(\"div\", wrap, \"CodeMirror-merge CodeMirror-merge-\" + panes + \"pane\"));\n    this.edit = CodeMirror(editPane, copyObj(options));\n\n    if (left) left.init(leftPane, origLeft, options);\n    if (right) right.init(rightPane, origRight, options);\n    if (options.collapseIdentical)\n      this.editor().operation(function() {\n        collapseIdenticalStretches(self, options.collapseIdentical);\n      });\n    if (options.connect == \"align\") {\n      this.aligners = [];\n      alignChunks(this.left || this.right, true);\n    }\n    if (left) left.registerEvents(right)\n    if (right) right.registerEvents(left)\n\n\n    var onResize = function() {\n      if (left) makeConnections(left);\n      if (right) makeConnections(right);\n    };\n    CodeMirror.on(window, \"resize\", onResize);\n    var resizeInterval = setInterval(function() {\n      for (var p = wrapElt.parentNode; p && p != document.body; p = p.parentNode) {}\n      if (!p) { clearInterval(resizeInterval); CodeMirror.off(window, \"resize\", onResize); }\n    }, 5000);\n  };\n\n  function buildGap(dv) {\n    var lock = dv.lockButton = elt(\"div\", null, \"CodeMirror-merge-scrolllock\");\n    lock.setAttribute(\"role\", \"button\");\n    var lockWrap = elt(\"div\", [lock], \"CodeMirror-merge-scrolllock-wrap\");\n    CodeMirror.on(lock, \"click\", function() { setScrollLock(dv, !dv.lockScroll); });\n    var gapElts = [lockWrap];\n    if (dv.mv.options.revertButtons !== false) {\n      dv.copyButtons = elt(\"div\", null, \"CodeMirror-merge-copybuttons-\" + dv.type);\n      CodeMirror.on(dv.copyButtons, \"click\", function(e) {\n        var node = e.target || e.srcElement;\n        if (!node.chunk) return;\n        if (node.className == \"CodeMirror-merge-copy-reverse\") {\n          copyChunk(dv, dv.orig, dv.edit, node.chunk);\n          return;\n        }\n        copyChunk(dv, dv.edit, dv.orig, node.chunk);\n      });\n      gapElts.unshift(dv.copyButtons);\n    }\n    if (dv.mv.options.connect != \"align\") {\n      var svg = document.createElementNS && document.createElementNS(svgNS, \"svg\");\n      if (svg && !svg.createSVGRect) svg = null;\n      dv.svg = svg;\n      if (svg) gapElts.push(svg);\n    }\n\n    return dv.gap = elt(\"div\", gapElts, \"CodeMirror-merge-gap\");\n  }\n\n  MergeView.prototype = {\n    constructor: MergeView,\n    editor: function() { return this.edit; },\n    rightOriginal: function() { return this.right && this.right.orig; },\n    leftOriginal: function() { return this.left && this.left.orig; },\n    setShowDifferences: function(val) {\n      if (this.right) this.right.setShowDifferences(val);\n      if (this.left) this.left.setShowDifferences(val);\n    },\n    rightChunks: function() {\n      if (this.right) { ensureDiff(this.right); return this.right.chunks; }\n    },\n    leftChunks: function() {\n      if (this.left) { ensureDiff(this.left); return this.left.chunks; }\n    }\n  };\n\n  function asString(obj) {\n    if (typeof obj == \"string\") return obj;\n    else return obj.getValue();\n  }\n\n  // Operations on diffs\n  var dmp;\n  function getDiff(a, b, ignoreWhitespace) {\n    if (!dmp) dmp = new diff_match_patch();\n\n    var diff = dmp.diff_main(a, b);\n    // The library sometimes leaves in empty parts, which confuse the algorithm\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i];\n      if (ignoreWhitespace ? !/[^ \\t]/.test(part[1]) : !part[1]) {\n        diff.splice(i--, 1);\n      } else if (i && diff[i - 1][0] == part[0]) {\n        diff.splice(i--, 1);\n        diff[i][1] += part[1];\n      }\n    }\n    return diff;\n  }\n\n  function getChunks(diff) {\n    var chunks = [];\n    if (!diff.length) return chunks;\n    var startEdit = 0, startOrig = 0;\n    var edit = Pos(0, 0), orig = Pos(0, 0);\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i], tp = part[0];\n      if (tp == DIFF_EQUAL) {\n        var startOff = !startOfLineClean(diff, i) || edit.line < startEdit || orig.line < startOrig ? 1 : 0;\n        var cleanFromEdit = edit.line + startOff, cleanFromOrig = orig.line + startOff;\n        moveOver(edit, part[1], null, orig);\n        var endOff = endOfLineClean(diff, i) ? 1 : 0;\n        var cleanToEdit = edit.line + endOff, cleanToOrig = orig.line + endOff;\n        if (cleanToEdit > cleanFromEdit) {\n          if (i) chunks.push({origFrom: startOrig, origTo: cleanFromOrig,\n                              editFrom: startEdit, editTo: cleanFromEdit});\n          startEdit = cleanToEdit; startOrig = cleanToOrig;\n        }\n      } else {\n        moveOver(tp == DIFF_INSERT ? edit : orig, part[1]);\n      }\n    }\n    if (startEdit <= edit.line || startOrig <= orig.line)\n      chunks.push({origFrom: startOrig, origTo: orig.line + 1,\n                   editFrom: startEdit, editTo: edit.line + 1});\n    return chunks;\n  }\n\n  function endOfLineClean(diff, i) {\n    if (i == diff.length - 1) return true;\n    var next = diff[i + 1][1];\n    if ((next.length == 1 && i < diff.length - 2) || next.charCodeAt(0) != 10) return false;\n    if (i == diff.length - 2) return true;\n    next = diff[i + 2][1];\n    return (next.length > 1 || i == diff.length - 3) && next.charCodeAt(0) == 10;\n  }\n\n  function startOfLineClean(diff, i) {\n    if (i == 0) return true;\n    var last = diff[i - 1][1];\n    if (last.charCodeAt(last.length - 1) != 10) return false;\n    if (i == 1) return true;\n    last = diff[i - 2][1];\n    return last.charCodeAt(last.length - 1) == 10;\n  }\n\n  function chunkBoundariesAround(chunks, n, nInEdit) {\n    var beforeE, afterE, beforeO, afterO;\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      var fromLocal = nInEdit ? chunk.editFrom : chunk.origFrom;\n      var toLocal = nInEdit ? chunk.editTo : chunk.origTo;\n      if (afterE == null) {\n        if (fromLocal > n) { afterE = chunk.editFrom; afterO = chunk.origFrom; }\n        else if (toLocal > n) { afterE = chunk.editTo; afterO = chunk.origTo; }\n      }\n      if (toLocal <= n) { beforeE = chunk.editTo; beforeO = chunk.origTo; }\n      else if (fromLocal <= n) { beforeE = chunk.editFrom; beforeO = chunk.origFrom; }\n    }\n    return {edit: {before: beforeE, after: afterE}, orig: {before: beforeO, after: afterO}};\n  }\n\n  function collapseSingle(cm, from, to) {\n    cm.addLineClass(from, \"wrap\", \"CodeMirror-merge-collapsed-line\");\n    var widget = document.createElement(\"span\");\n    widget.className = \"CodeMirror-merge-collapsed-widget\";\n    widget.title = cm.phrase(\"Identical text collapsed. Click to expand.\");\n    var mark = cm.markText(Pos(from, 0), Pos(to - 1), {\n      inclusiveLeft: true,\n      inclusiveRight: true,\n      replacedWith: widget,\n      clearOnEnter: true\n    });\n    function clear() {\n      mark.clear();\n      cm.removeLineClass(from, \"wrap\", \"CodeMirror-merge-collapsed-line\");\n    }\n    if (mark.explicitlyCleared) clear();\n    CodeMirror.on(widget, \"click\", clear);\n    mark.on(\"clear\", clear);\n    CodeMirror.on(widget, \"click\", clear);\n    return {mark: mark, clear: clear};\n  }\n\n  function collapseStretch(size, editors) {\n    var marks = [];\n    function clear() {\n      for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n    for (var i = 0; i < editors.length; i++) {\n      var editor = editors[i];\n      var mark = collapseSingle(editor.cm, editor.line, editor.line + size);\n      marks.push(mark);\n      mark.mark.on(\"clear\", clear);\n    }\n    return marks[0].mark;\n  }\n\n  function unclearNearChunks(dv, margin, off, clear) {\n    for (var i = 0; i < dv.chunks.length; i++) {\n      var chunk = dv.chunks[i];\n      for (var l = chunk.editFrom - margin; l < chunk.editTo + margin; l++) {\n        var pos = l + off;\n        if (pos >= 0 && pos < clear.length) clear[pos] = false;\n      }\n    }\n  }\n\n  function collapseIdenticalStretches(mv, margin) {\n    if (typeof margin != \"number\") margin = 2;\n    var clear = [], edit = mv.editor(), off = edit.firstLine();\n    for (var l = off, e = edit.lastLine(); l <= e; l++) clear.push(true);\n    if (mv.left) unclearNearChunks(mv.left, margin, off, clear);\n    if (mv.right) unclearNearChunks(mv.right, margin, off, clear);\n\n    for (var i = 0; i < clear.length; i++) {\n      if (clear[i]) {\n        var line = i + off;\n        for (var size = 1; i < clear.length - 1 && clear[i + 1]; i++, size++) {}\n        if (size > margin) {\n          var editors = [{line: line, cm: edit}];\n          if (mv.left) editors.push({line: getMatchingOrigLine(line, mv.left.chunks), cm: mv.left.orig});\n          if (mv.right) editors.push({line: getMatchingOrigLine(line, mv.right.chunks), cm: mv.right.orig});\n          var mark = collapseStretch(size, editors);\n          if (mv.options.onCollapse) mv.options.onCollapse(mv, line, size, mark);\n        }\n      }\n    }\n  }\n\n  // General utilities\n\n  function elt(tag, content, className, style) {\n    var e = document.createElement(tag);\n    if (className) e.className = className;\n    if (style) e.style.cssText = style;\n    if (typeof content == \"string\") e.appendChild(document.createTextNode(content));\n    else if (content) for (var i = 0; i < content.length; ++i) e.appendChild(content[i]);\n    return e;\n  }\n\n  function clear(node) {\n    for (var count = node.childNodes.length; count > 0; --count)\n      node.removeChild(node.firstChild);\n  }\n\n  function attrs(elt) {\n    for (var i = 1; i < arguments.length; i += 2)\n      elt.setAttribute(arguments[i], arguments[i+1]);\n  }\n\n  function copyObj(obj, target) {\n    if (!target) target = {};\n    for (var prop in obj) if (obj.hasOwnProperty(prop)) target[prop] = obj[prop];\n    return target;\n  }\n\n  function moveOver(pos, str, copy, other) {\n    var out = copy ? Pos(pos.line, pos.ch) : pos, at = 0;\n    for (;;) {\n      var nl = str.indexOf(\"\\n\", at);\n      if (nl == -1) break;\n      ++out.line;\n      if (other) ++other.line;\n      at = nl + 1;\n    }\n    out.ch = (at ? 0 : out.ch) + (str.length - at);\n    if (other) other.ch = (at ? 0 : other.ch) + (str.length - at);\n    return out;\n  }\n\n  // Tracks collapsed markers and line widgets, in order to be able to\n  // accurately align the content of two editors.\n\n  var F_WIDGET = 1, F_WIDGET_BELOW = 2, F_MARKER = 4\n\n  function TrackAlignable(cm) {\n    this.cm = cm\n    this.alignable = []\n    this.height = cm.doc.height\n    var self = this\n    cm.on(\"markerAdded\", function(_, marker) {\n      if (!marker.collapsed) return\n      var found = marker.find(1)\n      if (found != null) self.set(found.line, F_MARKER)\n    })\n    cm.on(\"markerCleared\", function(_, marker, _min, max) {\n      if (max != null && marker.collapsed)\n        self.check(max, F_MARKER, self.hasMarker)\n    })\n    cm.on(\"markerChanged\", this.signal.bind(this))\n    cm.on(\"lineWidgetAdded\", function(_, widget, lineNo) {\n      if (widget.mergeSpacer) return\n      if (widget.above) self.set(lineNo - 1, F_WIDGET_BELOW)\n      else self.set(lineNo, F_WIDGET)\n    })\n    cm.on(\"lineWidgetCleared\", function(_, widget, lineNo) {\n      if (widget.mergeSpacer) return\n      if (widget.above) self.check(lineNo - 1, F_WIDGET_BELOW, self.hasWidgetBelow)\n      else self.check(lineNo, F_WIDGET, self.hasWidget)\n    })\n    cm.on(\"lineWidgetChanged\", this.signal.bind(this))\n    cm.on(\"change\", function(_, change) {\n      var start = change.from.line, nBefore = change.to.line - change.from.line\n      var nAfter = change.text.length - 1, end = start + nAfter\n      if (nBefore || nAfter) self.map(start, nBefore, nAfter)\n      self.check(end, F_MARKER, self.hasMarker)\n      if (nBefore || nAfter) self.check(change.from.line, F_MARKER, self.hasMarker)\n    })\n    cm.on(\"viewportChange\", function() {\n      if (self.cm.doc.height != self.height) self.signal()\n    })\n  }\n\n  TrackAlignable.prototype = {\n    signal: function() {\n      CodeMirror.signal(this, \"realign\")\n      this.height = this.cm.doc.height\n    },\n\n    set: function(n, flags) {\n      var pos = -1\n      for (; pos < this.alignable.length; pos += 2) {\n        var diff = this.alignable[pos] - n\n        if (diff == 0) {\n          if ((this.alignable[pos + 1] & flags) == flags) return\n          this.alignable[pos + 1] |= flags\n          this.signal()\n          return\n        }\n        if (diff > 0) break\n      }\n      this.signal()\n      this.alignable.splice(pos, 0, n, flags)\n    },\n\n    find: function(n) {\n      for (var i = 0; i < this.alignable.length; i += 2)\n        if (this.alignable[i] == n) return i\n      return -1\n    },\n\n    check: function(n, flag, pred) {\n      var found = this.find(n)\n      if (found == -1 || !(this.alignable[found + 1] & flag)) return\n      if (!pred.call(this, n)) {\n        this.signal()\n        var flags = this.alignable[found + 1] & ~flag\n        if (flags) this.alignable[found + 1] = flags\n        else this.alignable.splice(found, 2)\n      }\n    },\n\n    hasMarker: function(n) {\n      var handle = this.cm.getLineHandle(n)\n      if (handle.markedSpans) for (var i = 0; i < handle.markedSpans.length; i++)\n        if (handle.markedSpans[i].marker.collapsed && handle.markedSpans[i].to != null)\n          return true\n      return false\n    },\n\n    hasWidget: function(n) {\n      var handle = this.cm.getLineHandle(n)\n      if (handle.widgets) for (var i = 0; i < handle.widgets.length; i++)\n        if (!handle.widgets[i].above && !handle.widgets[i].mergeSpacer) return true\n      return false\n    },\n\n    hasWidgetBelow: function(n) {\n      if (n == this.cm.lastLine()) return false\n      var handle = this.cm.getLineHandle(n + 1)\n      if (handle.widgets) for (var i = 0; i < handle.widgets.length; i++)\n        if (handle.widgets[i].above && !handle.widgets[i].mergeSpacer) return true\n      return false\n    },\n\n    map: function(from, nBefore, nAfter) {\n      var diff = nAfter - nBefore, to = from + nBefore, widgetFrom = -1, widgetTo = -1\n      for (var i = 0; i < this.alignable.length; i += 2) {\n        var n = this.alignable[i]\n        if (n == from && (this.alignable[i + 1] & F_WIDGET_BELOW)) widgetFrom = i\n        if (n == to && (this.alignable[i + 1] & F_WIDGET_BELOW)) widgetTo = i\n        if (n <= from) continue\n        else if (n < to) this.alignable.splice(i--, 2)\n        else this.alignable[i] += diff\n      }\n      if (widgetFrom > -1) {\n        var flags = this.alignable[widgetFrom + 1]\n        if (flags == F_WIDGET_BELOW) this.alignable.splice(widgetFrom, 2)\n        else this.alignable[widgetFrom + 1] = flags & ~F_WIDGET_BELOW\n      }\n      if (widgetTo > -1 && nAfter)\n        this.set(from + nAfter, F_WIDGET_BELOW)\n    }\n  }\n\n  function posMin(a, b) { return (a.line - b.line || a.ch - b.ch) < 0 ? a : b; }\n  function posMax(a, b) { return (a.line - b.line || a.ch - b.ch) > 0 ? a : b; }\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  function findPrevDiff(chunks, start, isOrig) {\n    for (var i = chunks.length - 1; i >= 0; i--) {\n      var chunk = chunks[i];\n      var to = (isOrig ? chunk.origTo : chunk.editTo) - 1;\n      if (to < start) return to;\n    }\n  }\n\n  function findNextDiff(chunks, start, isOrig) {\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      var from = (isOrig ? chunk.origFrom : chunk.editFrom);\n      if (from > start) return from;\n    }\n  }\n\n  function goNearbyDiff(cm, dir) {\n    var found = null, views = cm.state.diffViews, line = cm.getCursor().line;\n    if (views) for (var i = 0; i < views.length; i++) {\n      var dv = views[i], isOrig = cm == dv.orig;\n      ensureDiff(dv);\n      var pos = dir < 0 ? findPrevDiff(dv.chunks, line, isOrig) : findNextDiff(dv.chunks, line, isOrig);\n      if (pos != null && (found == null || (dir < 0 ? pos > found : pos < found)))\n        found = pos;\n    }\n    if (found != null)\n      cm.setCursor(found, 0);\n    else\n      return CodeMirror.Pass;\n  }\n\n  CodeMirror.commands.goNextDiff = function(cm) {\n    return goNearbyDiff(cm, 1);\n  };\n  CodeMirror.commands.goPrevDiff = function(cm) {\n    return goNearbyDiff(cm, -1);\n  };\n});\n", "/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;", "var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nimport \"codemirror/lib/codemirror.css\";\nimport { defineComponent, ref, onMounted, markRaw, watch, openBlock, createElementBlock, nextTick, getCurrentInstance, onBeforeUnmount, normalizeClass, normalizeStyle, createBlock, resolveDynamicComponent, mergeProps } from \"vue\";\nimport _CodeMirror from \"codemirror\";\nimport \"codemirror/addon/merge/merge.css\";\nimport \"codemirror/addon/merge/merge.js\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport \"codemirror/addon/mode/simple.js\";\nimport * as codemirror from \"codemirror/lib/codemirror.js\";\nvar _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\nconst CodeMirror$2 = window.CodeMirror || _CodeMirror;\nconst _sfc_main$3 = defineComponent({\n  name: \"defaultMode\",\n  props: {\n    name: {\n      type: String,\n      default: `cm-textarea-${+new Date()}`\n    },\n    value: String,\n    content: String,\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    cminstance: {\n      type: Object,\n      default: () => ({})\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"update:cminstance\", \"ready\"],\n  setup(props, { emit }) {\n    const textarea = ref();\n    const _cminstance = ref(null);\n    const initialize = () => {\n      _cminstance.value = markRaw(CodeMirror$2.fromTextArea(textarea.value, props.options));\n      emit(\"update:cminstance\", _cminstance.value);\n      let unwatch = null;\n      unwatch = watch(() => props.cminstance, (val, oldVal) => {\n        val && props.cminstance.setValue(props.value || props.content);\n        emit(\"ready\", _cminstance);\n        unwatch();\n      }, { deep: true });\n    };\n    onMounted(() => {\n      initialize();\n    });\n    return {\n      initialize,\n      textarea\n    };\n  }\n});\nconst _hoisted_1$2 = [\"name\", \"placeholder\"];\nfunction _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"textarea\", {\n    ref: \"textarea\",\n    name: _ctx.$props.name,\n    placeholder: _ctx.$props.placeholder\n  }, null, 8, _hoisted_1$2);\n}\nvar Default = /* @__PURE__ */ _export_sfc(_sfc_main$3, [[\"render\", _sfc_render$3]]);\nconst CodeMirror$1 = (window == null ? void 0 : window.CodeMirror) || _CodeMirror;\nwindow.diff_match_patch = DiffMatchPatch;\nwindow.DIFF_DELETE = -1;\nwindow.DIFF_INSERT = 1;\nwindow.DIFF_EQUAL = 0;\nconst _sfc_main$2 = defineComponent({\n  name: \"mergeMode\",\n  props: {\n    name: {\n      type: String,\n      default: `cm-mergeView-${new Date().toString()}`\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    cminstance: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:cminstance\", \"ready\"],\n  setup(props, { emit }) {\n    const _cminstance = ref(null);\n    const mergeView = ref(null);\n    const initialize = () => {\n      _cminstance.value = markRaw(CodeMirror$1.MergeView(mergeView.value, props.options));\n      emit(\"update:cminstance\", _cminstance.value.edit);\n      emit(\"ready\", _cminstance);\n    };\n    onMounted(() => {\n      initialize();\n    });\n    return {\n      mergeView,\n      initialize\n    };\n  }\n});\nconst _hoisted_1$1 = [\"name\"];\nfunction _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"mergeView\",\n    name: _ctx.$props.name\n  }, null, 8, _hoisted_1$1);\n}\nvar Merge = /* @__PURE__ */ _export_sfc(_sfc_main$2, [[\"render\", _sfc_render$2]]);\nvar errorType;\n(function(errorType2) {\n  errorType2[\"info\"] = \"info\";\n  errorType2[\"warning\"] = \"warning\";\n  errorType2[\"error\"] = \"error\";\n})(errorType || (errorType = {}));\nfunction getLocalTime() {\n  const date = new Date();\n  const h = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n  const m = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n  const s = date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds();\n  return `${h}:${m}:${s}`;\n}\nfunction createLinkMark(attrs) {\n  return `#link#${JSON.stringify(attrs)}#link#`;\n}\nfunction getLinkMark(value) {\n  const linkRegexp = /#link#(.+)#link#/g;\n  let result = [];\n  let indexObj;\n  indexObj = linkRegexp.exec(value);\n  while (indexObj) {\n    const node = document.createElement(\"a\");\n    const attrs = JSON.parse(indexObj[1]);\n    const keyAndValues = Object.entries(attrs);\n    for (let [_key, _value] of keyAndValues) {\n      node.setAttribute(_key, _value);\n    }\n    node.className = \"editor_custom_link\";\n    node.innerHTML = \"logDownload\";\n    result.push({\n      start: indexObj.index,\n      end: indexObj.index + indexObj[0].length,\n      node\n    });\n    indexObj = linkRegexp.exec(value);\n  }\n  return result;\n}\nfunction createLogMark(text = \"\", type = \"info\") {\n  return `#log<${type}>log#${text}#log<${type}>log#`;\n}\nfunction getLogMark(value) {\n  let result = [];\n  function match() {\n    const logRegexp = new RegExp(`#log<(\\\\w*)>log#((.|\\r\n|\n)*?)#log<(\\\\w*)>log#`, \"g\");\n    let indexObj;\n    indexObj = logRegexp.exec(value);\n    while (indexObj) {\n      let text = indexObj[0].replace(/\\r\\n/g, \"\\n\");\n      let textArr = text.split(\"\\n\");\n      let content = indexObj[2].replace(/\\r\\n/g, \"\\n\");\n      let contentArr = content.split(\"\\n\");\n      const node = document.createElement(\"span\");\n      let type = indexObj[1];\n      node.className = `c-editor--log__${type}`;\n      let offset = 0;\n      for (let i = 0; i < textArr.length; i++) {\n        let textItem = textArr[i];\n        let contentItem = contentArr[i];\n        let cloneNode = node.cloneNode(false);\n        cloneNode.innerText = contentItem;\n        result.push({\n          start: indexObj.index + offset,\n          end: indexObj.index + offset + textItem.length,\n          node: cloneNode\n        });\n        offset = offset + textItem.length + 1;\n      }\n      indexObj = logRegexp.exec(value);\n    }\n  }\n  match();\n  return result;\n}\nfunction createLog(log, type = \"\") {\n  let now = getLocalTime();\n  return `[${now}] <${type}> ${log}`;\n}\nfunction createTitle(title = \"\", baseLength = 20, symbol = \"=\") {\n  const offsetLength = Math.floor(1.5 * title.length / 2);\n  let arr = new Array(Math.max(baseLength - offsetLength, 5));\n  const wraptext = arr.join(symbol);\n  return `${wraptext}${title}${wraptext}`;\n}\nconst startRegex = [\n  {\n    regex: /(\\[.*?\\])([ \\t]*)(<error>[ \\t])(.+)/,\n    token: [\"tag\", null, \"error.strong\", \"error.strong\"],\n    sol: true\n  },\n  {\n    regex: /(\\[.*?\\])([ \\t]*)(<info>)(.+)(.?)/,\n    token: [\"tag\", null, \"bracket\", \"bracket\", \"hr\"],\n    sol: true\n  },\n  {\n    regex: /(\\[.*?\\])([ \\t]*)(<warning>)(.+)(.?)/,\n    token: [\"tag\", null, \"comment\", \"comment\", \"hr\"],\n    sol: true\n  }\n];\n_CodeMirror.defineSimpleMode(\"fclog\", {\n  start: [\n    ...startRegex,\n    {\n      regex: /.*/,\n      token: \"hr\"\n    }\n  ],\n  error: [\n    ...startRegex,\n    {\n      regex: /.*/,\n      token: \"error.strong\"\n    }\n  ],\n  info: [\n    ...startRegex,\n    {\n      regex: /.*/,\n      token: \"bracket\"\n    }\n  ],\n  warning: [\n    ...startRegex,\n    {\n      regex: /.*\\[/,\n      token: \"comment\"\n    }\n  ]\n});\ncodemirror.defineSimpleMode(\"log\", {\n  start: [\n    {\n      regex: /^[=]+[^=]*[=]+/,\n      token: \"strong\"\n    },\n    {\n      regex: /([^\\w])([A-Z][\\w]*)/,\n      token: [null, \"string\"]\n    },\n    {\n      regex: /(^[A-Z][\\w]*)/,\n      token: \"string\"\n    }\n  ]\n});\nconst CodeMirror = window.CodeMirror || _CodeMirror;\nconst _sfc_main$1 = defineComponent({\n  name: \"codemirror-fclog\",\n  props: {\n    value: String,\n    content: String,\n    name: {\n      type: String,\n      default: `cm-textarea-${+new Date()}`\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    cminstance: {\n      type: Object,\n      default: () => ({})\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"update:cminstance\", \"ready\"],\n  setup(props, { emit }) {\n    const textarea = ref();\n    const _cminstance = ref(null);\n    const renderTextMark = (cminstance = props.cminstance) => {\n      const marks = cminstance.getAllMarks();\n      marks.forEach((mark) => mark.clear());\n      const value = cminstance.getValue();\n      const linkMarks = [].concat(getLinkMark(value)).concat(getLogMark(value));\n      for (let _i = 0; _i < linkMarks.length; _i++) {\n        const mark = linkMarks[_i];\n        cminstance.markText(cminstance.posFromIndex(mark.start), cminstance.posFromIndex(mark.end), { replacedWith: mark.node });\n      }\n    };\n    const initialize = () => {\n      _cminstance.value = markRaw(CodeMirror.fromTextArea(textarea.value, props.options));\n      emit(\"update:cminstance\", markRaw(_cminstance.value));\n      _cminstance.value.on(\"change\", renderTextMark);\n    };\n    watch(() => props.cminstance, (val) => {\n      if (val) {\n        renderTextMark(props.cminstance);\n        props.cminstance.setValue(props.value || props.content);\n        emit(\"ready\", _cminstance);\n      }\n    }, { deep: true, immediate: true });\n    onMounted(() => {\n      initialize();\n    });\n    return {\n      initialize,\n      textarea\n    };\n  }\n});\nconst _hoisted_1 = [\"name\", \"placeholder\"];\nfunction _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"textarea\", {\n    ref: \"textarea\",\n    name: _ctx.$props.name,\n    placeholder: _ctx.$props.placeholder\n  }, null, 8, _hoisted_1);\n}\nvar FcLog = /* @__PURE__ */ _export_sfc(_sfc_main$1, [[\"render\", _sfc_render$1]]);\nfunction scrollToEnd(cm) {\n  Promise.resolve().then(() => {\n    let nowScrollInfo = cm.getScrollInfo();\n    cm.scrollTo(nowScrollInfo.left, nowScrollInfo.height);\n  });\n}\nfunction useEvents({\n  props,\n  cminstance,\n  ctx,\n  internalInstance,\n  content,\n  componentsEvts: componentsEvts2\n}) {\n  const getUseEvents = () => {\n    let evts = [];\n    Object.keys(internalInstance.vnode.props).forEach((v) => {\n      if (v.startsWith(\"on\")) {\n        let e = v.replace(v[2], v[2].toLowerCase()).slice(2);\n        !componentsEvts2.includes(e) && evts.push(e);\n      }\n    });\n    return evts;\n  };\n  const listenerEvents = () => {\n    cminstance.value.on(\"change\", (cm) => {\n      const currentVal = cm.getValue();\n      if (currentVal == content.value)\n        return;\n      content.value = currentVal;\n      ctx.emit(\"update:value\", content.value);\n      ctx.emit(\"input\", content.value);\n      Promise.resolve().then(() => {\n        ctx.emit(\"change\", content.value, cm);\n      });\n      props.KeepCursorInEnd && scrollToEnd(cm);\n    });\n    const tmpEvents = {};\n    const useEvts = getUseEvents();\n    const allEvents = useEvts.filter((e) => !tmpEvents[e] && (tmpEvents[e] = true)).forEach((event) => {\n      cminstance.value.on(event, (...args) => {\n        ctx.emit(event, ...args);\n      });\n    });\n    return allEvents;\n  };\n  return {\n    listenerEvents\n  };\n}\nfunction useViewControl({ props, cminstance, presetRef }) {\n  const containerWidth = ref(null);\n  const containerHeight = ref(null);\n  const refresh = () => {\n    nextTick(() => {\n      cminstance.value.refresh();\n    });\n  };\n  const resize = (width = props.width, height = props.height) => {\n    containerWidth.value = String(width).replace(\"px\", \"\");\n    containerHeight.value = String(height).replace(\"px\", \"\");\n    let cmHeight = containerHeight.value;\n    cminstance.value.setSize(containerWidth.value, cmHeight);\n  };\n  const destroy = () => {\n    const element = cminstance.value.doc.cm.getWrapperElement();\n    element == null ? void 0 : element.remove();\n  };\n  const isStyleChaotic = () => {\n    const gutterEl = document.querySelector(\".CodeMirror-gutters\");\n    const gutterElLeft = gutterEl.style.left.replace(\"px\", \"\");\n    return gutterElLeft != \"0\";\n  };\n  const reviseStyle = () => {\n    refresh();\n    if (!isStyleChaotic())\n      return;\n    let timer = setInterval(() => {\n      isStyleChaotic() ? refresh() : clearInterval(timer);\n    }, 60);\n    let clearTimer = setTimeout(() => {\n      clearInterval(timer);\n      clearTimeout(clearTimer);\n      timer = null;\n      clearTimer = null;\n    }, 400);\n  };\n  return {\n    refresh,\n    resize,\n    destroy,\n    containerHeight,\n    reviseStyle\n  };\n}\nconst componentsEvts = [\"update:value\", \"change\", \"input\", \"ready\"];\nconst cmEvts = [\n  \"changes\",\n  \"scroll\",\n  \"beforeChange\",\n  \"cursorActivity\",\n  \"keyHandled\",\n  \"inputRead\",\n  \"electricInput\",\n  \"beforeSelectionChange\",\n  \"viewportChange\",\n  \"swapDoc\",\n  \"gutterClick\",\n  \"gutterContextMenu\",\n  \"focus\",\n  \"blur\",\n  \"refresh\",\n  \"optionChange\",\n  \"scrollCursorIntoView\",\n  \"update\"\n];\nconst DEFAULT_OPTIONS = {\n  mode: \"text\",\n  theme: \"default\",\n  lineNumbers: true,\n  smartIndent: true,\n  indentUnit: 2,\n  foldGutter: true,\n  matchBrackets: true,\n  autoCloseBrackets: true,\n  styleActiveLine: true\n};\nif (typeof Object.assign != \"function\") {\n  Object.defineProperty(Object, \"assign\", {\n    value(target, varArgs) {\n      if (target == null) {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n      }\n      const to = Object(target);\n      for (let index2 = 1; index2 < arguments.length; index2++) {\n        const nextSource = arguments[index2];\n        if (nextSource != null) {\n          for (const nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\nconst _sfc_main = defineComponent({\n  name: \"CodemirrorEditor\",\n  props: {\n    value: String,\n    marker: Function,\n    unseenLines: Array,\n    name: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    merge: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    globalOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: [String, Number],\n      default: null\n    },\n    height: {\n      type: [String, Number],\n      default: null\n    },\n    KeepCursorInEnd: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [...componentsEvts, ...cmEvts],\n  components: {\n    Default,\n    Merge,\n    FcLog\n  },\n  setup(props, ctx) {\n    var _a, _b;\n    const cminstance = ref(null);\n    const content = ref(\"\");\n    const presetModeName = ref(\"Default\");\n    const cmOptions = ref(Object.assign(__spreadValues({}, DEFAULT_OPTIONS), props.globalOptions, props.options));\n    const internalInstance = getCurrentInstance();\n    const presetRef = ref(null);\n    const { refresh, resize, destroy, containerHeight, reviseStyle } = useViewControl({\n      props,\n      cminstance,\n      presetRef\n    });\n    const { listenerEvents } = useEvents({\n      props,\n      cminstance,\n      ctx,\n      internalInstance,\n      content,\n      componentsEvts\n    });\n    const unseenLineMarkers = () => {\n      if (props.unseenLines !== void 0 && props.marker !== void 0) {\n        props.unseenLines.forEach((line) => {\n          const info = cminstance.value.lineInfo(line);\n          cminstance.value.setGutterMarker(line, \"breakpoints\", info.gutterMarkers ? null : props.marker());\n        });\n      }\n    };\n    const onCodeChange = (newVal) => {\n      const cm_value = cminstance.value.getValue();\n      if (newVal !== cm_value) {\n        cminstance.value.setValue(newVal);\n        content.value = newVal;\n        reviseStyle();\n      }\n      unseenLineMarkers();\n    };\n    const ready = (codemirror2) => {\n      listenerEvents();\n      unseenLineMarkers();\n      resize();\n      ctx.emit(\"ready\", cminstance.value);\n      watch([() => props.height, () => props.width], ([height, width]) => {\n        resize(height, width);\n      }, { deep: true });\n    };\n    const handlePresetModeName = () => {\n      if (props.options.mode == \"fclog\" || props.options.mode == \"log\") {\n        presetModeName.value = \"FcLog\";\n        return;\n      }\n      if (props.merge) {\n        presetModeName.value = \"Merge\";\n        return;\n      }\n      presetModeName.value = \"default\";\n    };\n    watch(() => props.options, (val) => {\n      for (const key in props.options) {\n        cminstance.value.setOption(key, val[key]);\n      }\n    }, { deep: true });\n    watch(() => props.value, (val) => {\n      onCodeChange(val);\n    });\n    watch(() => props.merge, (val) => {\n      handlePresetModeName();\n    }, { immediate: true });\n    onBeforeUnmount(() => {\n      destroy();\n    });\n    return {\n      presetModeName,\n      cmOptions,\n      cminstance,\n      content,\n      ready,\n      resize,\n      containerHeight,\n      instanceName: props.name || ((_b = (_a = internalInstance == null ? void 0 : internalInstance.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.name) || void 0,\n      presetRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"codemirror-container\", {\n      merge: _ctx.$props.merge,\n      bordered: _ctx.$props.border || _ctx.$props.merge,\n      \"width-auto\": !_ctx.$props.width || _ctx.$props.width == \"100%\",\n      \"height-auto\": !_ctx.$props.height || _ctx.$props.height == \"100%\"\n    }]),\n    style: normalizeStyle({\n      height: _ctx.containerHeight + \"px\"\n    })\n  }, [\n    (openBlock(), createBlock(resolveDynamicComponent(_ctx.presetModeName), mergeProps({\n      style: { \"height\": \"100%\" },\n      ref: \"presetRef\",\n      cminstance: _ctx.cminstance,\n      \"onUpdate:cminstance\": _cache[0] || (_cache[0] = ($event) => _ctx.cminstance = $event)\n    }, __spreadProps(__spreadValues(__spreadValues({}, _ctx.$props), _ctx.$attrs), {\n      options: _ctx.cmOptions,\n      name: _ctx.instanceName,\n      content: _ctx.content\n    }), { onReady: _ctx.ready }), null, 16, [\"cminstance\", \"onReady\"]))\n  ], 6);\n}\nvar Codemirror = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nvar index$1 = \"\";\nvar index = \"\";\nCodemirror.install = (app, config) => {\n  if (config) {\n    if (config.options) {\n      Codemirror.props.globalOptions.default = () => config.options;\n    }\n    if (config.events) {\n      Codemirror.props.globalEvents.default = () => config.events;\n    }\n  }\n  app.component(\"Codemirror\", Codemirror);\n  return app;\n};\nfunction styleInject(css,ref){if(ref===void 0){ref={}}var insertAt=ref.insertAt;if(!css||typeof document===\"undefined\"){return}var head=document.head||document.getElementsByTagName(\"head\")[0];var style=document.createElement(\"style\");style.type=\"text/css\";if(insertAt===\"top\"){if(head.firstChild){head.insertBefore(style,head.firstChild)}else{head.appendChild(style)}}else{head.appendChild(style)}if(style.styleSheet){style.styleSheet.cssText=css}else{style.appendChild(document.createTextNode(css))}};styleInject(`.codemirror-container {\n  position: relative;\n  display: inline-block;\n  height: 100%;\n  width: fit-content;\n  font-size: 12px;\n  overflow: hidden;\n}\n.codemirror-container.bordered {\n  border-radius: 4px;\n  border: 1px solid #dddddd;\n}\n.codemirror-container.width-auto {\n  width: 100%;\n}\n.codemirror-container.height-auto {\n  height: 100%;\n}\n.codemirror-container.height-auto .CodeMirror,\n.codemirror-container.height-auto .cm-s-default {\n  height: 100% !important;\n}\n.CodeMirror-lines .CodeMirror-placeholder.CodeMirror-line-like {\n  color: #666;\n}\n.CodeMirror,\n.CodeMirror-merge-pane {\n  height: 100%;\n  font-family: consolas !important;\n}\n.CodeMirror-merge,\n.CodeMirror-merge-right .CodeMirror {\n  height: 100%;\n  border: none !important;\n}\n.editor_custom_link {\n  cursor: pointer;\n  color: #1474f1;\n  text-decoration: underline;\n}\n.editor_custom_link:hover {\n  color: #04b4fa;\n}\n.c-editor--log__error {\n  color: #bb0606;\n  font-weight: bold;\n}\n.c-editor--log__info {\n  color: #333333;\n  font-weight: bold;\n}\n.c-editor--log__warning {\n  color: #ee9900;\n}\n.c-editor--log__success {\n  color: #669600;\n}\n.cm-header,\n.cm-strong {\n  font-weight: bold;\n}\n`);\nexport { Codemirror, createLinkMark, createLog, createLogMark, createTitle, Codemirror as default, getLinkMark, getLocalTime, getLogMark };\n", "import d from \"./node_modules/codemirror-editor-vue3/dist/codemirror-editor-vue3.es.js\";export default d;\nexport * from \"./node_modules/codemirror-editor-vue3/dist/codemirror-editor-vue3.es.js\""],
  "mappings": "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",
  "names": []
}
